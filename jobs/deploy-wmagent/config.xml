<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description>Integration wmagent instance</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.trac.TracProjectProperty plugin="trac@1.13">
      <tracWebsite>https://svnweb.cern.ch/trac/CMSDMWM/</tracWebsite>
    </hudson.plugins.trac.TracProjectProperty>
    <com.coravy.hudson.plugins.github.GithubProjectProperty plugin="github@1.4">
      <projectUrl>https://github.com/dmwm/WMCore/</projectUrl>
    </com.coravy.hudson.plugins.github.GithubProjectProperty>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.TextParameterDefinition>
          <name>WMAGENT_VERSION</name>
          <description>Override wmagent version: format &quot;0.8.1pre1&quot;; etc.
Blank for current deploy version. Only affects rpm install not code checkout.</description>
          <defaultValue></defaultValue>
        </hudson.model.TextParameterDefinition>
        <hudson.model.TextParameterDefinition>
          <name>SCRAM_ARCH</name>
          <description></description>
          <defaultValue>slc5_amd64_gcc461</defaultValue>
        </hudson.model.TextParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@1.7.2">
      <maxConcurrentPerNode>0</maxConcurrentPerNode>
      <maxConcurrentTotal>1</maxConcurrentTotal>
      <categories>
        <string>full-deploy-infrastructure</string>
      </categories>
      <throttleEnabled>true</throttleEnabled>
      <throttleOption>category</throttleOption>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
  </properties>
  <scm class="org.jenkinsci.plugins.multiplescms.MultiSCM" plugin="multiple-scms@0.2">
    <scms>
      <hudson.scm.SubversionSCM plugin="subversion@1.42">
        <locations>
          <hudson.scm.SubversionSCM_-ModuleLocation>
            <remote>https://github.com/dmwm/deployment/trunk@HEAD</remote>
            <local>deployment</local>
          </hudson.scm.SubversionSCM_-ModuleLocation>
          <hudson.scm.SubversionSCM_-ModuleLocation>
            <remote>https://github.com/dmwm/WMCore/trunk@HEAD</remote>
            <local>WMCore</local>
          </hudson.scm.SubversionSCM_-ModuleLocation>
        </locations>
        <excludedRegions></excludedRegions>
        <includedRegions></includedRegions>
        <excludedUsers></excludedUsers>
        <excludedRevprop></excludedRevprop>
        <excludedCommitMessages></excludedCommitMessages>
        <workspaceUpdater class="hudson.scm.subversion.UpdateUpdater"/>
      </hudson.scm.SubversionSCM>
    </scms>
  </scm>
  <assignedNode>dmwm-agent-int</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>true</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>true</blockBuildWhenUpstreamBuilding>
  <triggers class="vector">
    <hudson.triggers.SCMTrigger>
      <spec>*/5 * * * *</spec>
    </hudson.triggers.SCMTrigger>
    <org.jenkinsci.plugins.urltrigger.URLTrigger plugin="urltrigger@0.23">
      <spec>*/5 * * * *</spec>
      <triggerLabel>dmwm-agent-int</triggerLabel>
      <entries>
        <org.jenkinsci.plugins.urltrigger.URLTriggerEntry>
          <url>http://cms-dmwm-builds.web.cern.ch/cms-dmwm-builds/wmagent.slc5_amd64_gcc461.comp</url>
          <proxyActivated>false</proxyActivated>
          <checkStatus>false</checkStatus>
          <statusCode>200</statusCode>
          <checkETag>false</checkETag>
          <checkLastModificationDate>false</checkLastModificationDate>
          <inspectingContent>false</inspectingContent>
          <contentTypes/>
        </org.jenkinsci.plugins.urltrigger.URLTriggerEntry>
      </entries>
      <labelRestriction>true</labelRestriction>
    </org.jenkinsci.plugins.urltrigger.URLTrigger>
  </triggers>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command># run latest wmagent deploy
set -x

current=&quot;none&quot;
[ `ls -d current/sw*/slc5_amd64_gcc461/cms/wmagent/*` ] &amp;&amp; current=$(basename $(ls -d current/sw*/$SCRAM_ARCH/cms/wmagent/*))

# TODO: if a previous build leaves a corrupt install this will fail - how solve that - redeploy each time?

if [ X$WMAGENT_VERSION == X ]; then
  WMAGENT_VERSION=$(curl -s http://cms-dmwm-builds.web.cern.ch/cms-dmwm-builds/wmagent.$SCRAM_ARCH.comp | awk &apos;{print $4}&apos; | cut -d+ -f3)
fi

if [ X$current != X$WMAGENT_VERSION ]; then
  echo &quot;Deploying wmagent@$WMAGENT_VERSION&quot;
  if [ -e $PWD/current ]; then
    echo &quot;Stopping agent&quot;
    [ -e $PWD/current/config/wmagent/config.py ] &amp;&amp; $PWD/current/config/wmagent/manage stop-agent || true
    echo &quot;Stopping services&quot;
    [ -e $PWD/current/config/wmagent/config.py ] &amp;&amp; $PWD/current/config/wmagent/manage stop-services || true

    # delete old version
    rm -rf $(readlink current) &amp;&amp; rm -f current
  fi

  # deploy
  $PWD/deployment/Deploy -R wmagent-dev@${WMAGENT_VERSION} -r comp=comp -t $WMAGENT_VERSION -A $SCRAM_ARCH -s &apos;prep sw post&apos; $PWD admin/devtools wmagent

  # force mysql to a reasonable size
  perl -p -i -e &apos;s/set-variable = innodb_buffer_pool_size=2G/set-variable = innodb_buffer_pool_size=50M/&apos; current/config/mysql/my.cnf
  perl -p -i -e &apos;s/set-variable = innodb_log_file_size=512M/set-variable = innodb_log_file_size=20M/&apos; current/config/mysql/my.cnf
  perl -p -i -e &apos;s/key_buffer=4000M/key_buffer=100M/&apos; current/config/mysql/my.cnf
  perl -p -i -e &apos;s/max_heap_table_size=2048M/max_heap_table_size=100M/&apos; current/config/mysql/my.cnf
  perl -p -i -e &apos;s/tmp_table_size=2048M/tmp_table_size=100M/&apos; current/config/mysql/my.cnf

fi

# copy new config template from checkout area
WMCORE_ROOT=$PWD/WMCore $PWD/current/config/wmagent/manage activate-agent

# remove old crons
crontab -r || true

# patch rpm with checkout
( . current/apps/wmagent/etc/profile.d/init.sh &amp;&amp; cd WMCore &amp;&amp; wmc-dist-patch -s wmagent --skip-docs)

# stop the recursive link screwing things up (needs to be after bootstrap)
# jenkins hangs recursively scanning dir if left in
unlink current/sw*/var || /bin/true</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command># edit config - change default team
perl -p -i -e &apos;s/agentTeams =.*/agentTeams = &quot;TestTeam&quot;/&apos; current/config/wmagent/config-template.py

#reduce taskarchiver timeout
perl -p -i -e &apos;s/workflowArchiveTimeout =.*/workflowArchiveTimeout = 1/&apos; current/config/wmagent/config-template.py

# reduce retries
perl -p -i -e &apos;s/maxJobRetries =.*/maxJobRetries = 1/&apos; current/config/wmagent/config-template.py

# Big hack - someone in the unit test wipes wmagent_ couchdb db&apos;s - rename to something else
#perl -p -i -e &apos;s/wmagent_/testagent_/&apos; current/config/wmagent/config-template.py

# change to test workqueue
perl -p -i -e &apos;s!https://cmsweb.cern.ch/couchdb/workqueue!https://dev-cms-wq.cern.ch:8443/couchdb/workqueue!&apos; current/config/wmagent/config-template.py
# Use the mock submitter plugin - https://svnweb.cern.ch/trac/CMSDMWM/wiki/HOWTOMockGrid
perl -p -i -e &apos;s/CondorPlugin/MockPlugin/&apos; current/config/wmagent/config-template.py
echo &quot;config.WorkQueueManager.pollInterval = 60&quot; &gt;&gt; current/config/wmagent/config-template.py

# reduce polling intervals
perl -p -i -e &apos;s/.pollInterval = .*/.pollInterval = 30/&apos; current/config/wmagent/config-template.py

echo &quot;
config.BossAir.section_(&apos;MockPlugin&apos;)
config.BossAir.MockPlugin.jobRunTime = 1
config.BossAir.MockPlugin.mockPluginProcesses = 1
config.BossAir.MockPlugin.fakeReport = &apos;../../../../WMCore/test/python/WMCore_t/BossAir_t/FakeReport.pkl&apos;
config.BossAir.MockPlugin.lcFakeReport = &apos;../../../../WMCore/test/python/WMCore_t/BossAir_t/LogCollectFakeReport.pkl&apos;
&quot; &gt;&gt; current/config/wmagent/config-template.py</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command># start / ensure services are running

export X509_USER_CERT=/etc/grid-security/hostcert.pem
export X509_USER_KEY=/etc/grid-security/hostkey.pem

# stop old processes
$PWD/current/config/wmagent/manage stop-services || rm -f current/install/mysql/logs/mysql.sock
$PWD/current/config/wmagent/manage stop-agent || true
pkill -9 -f $PWD || true

echo &quot;starting services&quot;
# divorce mysql and couchdb processes so they dont get killed
# https://wiki.jenkins-ci.org/display/JENKINS/ProcessTreeKiller
BUILD_ID=dontKillMe $PWD/current/config/wmagent/manage start-services

echo &quot;Init agent&quot;
# force couchdb init
rm -f current/install/wmagent/.init
$PWD/current/config/wmagent/manage init-agent
#rm -f current/install/wmagent/.init
#$PWD/current/config/wmagent/manage init-agent || /bin/true # retry to ensure all inited

# add sites
current/config/wmagent/manage execute-agent wmagent-resource-control --add-all-sites --plugin=MockPlugin --running-slots=100  || /bin/true # sites may already exist
# CERN not added by above?
current/config/wmagent/manage execute-agent wmagent-resource-control --site-name=T1_CH_CERN --running-slots=100 --se-name=srm-cms.cern.ch --ce-name=ce.cern.ch --plugin=MockPlugin --cms-name=T1_CH_CERN || /bin/true # site may already exist

echo &quot;start agent&quot;
BUILD_ID=dontKillMe $PWD/current/config/wmagent/manage start-agent</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers/>
  <buildWrappers/>
</project>